/*** Generated by streamline 0.4.0 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch;
/*     1 */ (function() {
/*     2 */   var PropertyContainer, Relationship, adjustError, status, util, __hasProp = {
/*     3 */   }.hasOwnProperty, __extends = function(child, parent) {
/*     4 */     for (var key in parent) {
/*     4 */       if (__hasProp.call(parent, key)) {
/*     4 */         child[key] = parent[key];
                  };
                };
/*     4 */     function ctor() {
/*     4 */       this.constructor = child;
                };
/*     4 */     ctor.prototype = parent.prototype;
/*     4 */     child.prototype = new ctor();
/*     4 */     child.__super__ = parent.prototype;
/*     4 */     return child;
              };
/*     6 */   status = require("http-status");
/*     8 */   util = require("./util");
/*    10 */   adjustError = util.adjustError;
/*    12 */   PropertyContainer = require("./PropertyContainer");
/*    14 */   module.exports = Relationship = (function(_super) {
/*    15 */     var get, set, _this = this;
/*    18 */     __extends(Relationship, _super);
/*    20 */     function Relationship(db, data, start, end) {
/*    21 */       var Node;
/*    22 */       Relationship.__super__.constructor.call(this, db, data);
/*    23 */       Node = require("./Node");
/*    24 */       this._start = (start || new Node(db, {
/*    25 */         self: data.start
                  }));
/*    27 */       this._end = (end || new Node(db, {
/*    28 */         self: data.end
                  }));
                };
/*    32 */     get = function(props) {
/*    33 */       var getter, name, _results;
/*    34 */       _results = [];
/*    35 */       for (name in props) {
/*    36 */         getter = props[name];
/*    37 */         _results.push(Relationship.prototype.__defineGetter__(name, getter));
                  };
/*    39 */       return _results;
                };
/*    42 */     set = function(props) {
/*    43 */       var name, setter, _results;
/*    44 */       _results = [];
/*    45 */       for (name in props) {
/*    46 */         setter = props[name];
/*    47 */         _results.push(Relationship.prototype.__defineSetter__(name, setter));
                  };
/*    49 */       return _results;
                };
/*    52 */     get({
/*    53 */       start: function() {
/*    54 */         return (this._start || null);
                  }
                });
/*    58 */     get({
/*    59 */       end: function() {
/*    60 */         return (this._end || null);
                  }
                });
/*    64 */     get({
/*    65 */       type: function() {
/*    66 */         return this._data.type;
                  }
                });
/*    70 */     Relationship.prototype.save = function Relationship_prototype_save__1(_) {
                  var message, response, __this = this;
                  var __frame = {
                    name: "Relationship_prototype_save__1",
                    line: 70
                  };
                  return __func(_, this, arguments, Relationship_prototype_save__1, 0, __frame, function __$Relationship_prototype_save__1() {
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$Relationship_prototype_save__1() {
                          return (function __$Relationship_prototype_save__1(__then) {
/*    73 */                 if (__this.exists) {
/*    74 */                   return __this._request.put({
/*    75 */                     uri: (("" + __this.self) + "/properties"),
/*    76 */                     json: __this.data
                              }, __cb(_, __frame, 4, 21, function ___(__0, __1) {
/*    74 */                     response = __1;
/*    78 */                     if ((response.statusCode !== status.NO_CONTENT)) {
/*    79 */                       message = "";
/*    80 */                       switch (response.statusCode) {
/*    81 */                       case status.BAD_REQUEST:
/*    81 */                         message = "Invalid data sent";
/*    82 */                         break;
/*    83 */                       case status.NOT_FOUND:
/*    84 */                         message = "Relationship not found";
/*    85 */                       };
/*    87 */                       return _(new Error(message));
                                }
                              ;
                                __then();
                              }, true));
                            }
                             else {
                              __then();
                            }
                          ;
                          })(__then);
                        });
                      })(function ___(error, __result) {
                        __tryCatch(_, function __$Relationship_prototype_save__1() {
                          if (error) {
/*    91 */                 return _(adjustError(error));
                          }
                           else {
                            _(null, __result);
                          }
                        ;
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, _);
                    });
                  });
                };
/*    95 */     Relationship.prototype.del = Relationship.prototype["delete"];
/*    97 */     return Relationship;
/*    99 */   }).call(this, PropertyContainer);
/*   101 */ }).call(this);
