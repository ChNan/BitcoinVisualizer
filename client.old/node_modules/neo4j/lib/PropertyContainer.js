/*** Generated by streamline 0.4.0 (callbacks) - DO NOT EDIT ***/
var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename),__func=__rt.__func,__cb=__rt.__cb,__tryCatch=__rt.__tryCatch;
/*     1 */ (function() {
/*     2 */   var PropertyContainer, adjustError, status, util;
/*     4 */   status = require("http-status");
/*     6 */   util = require("./util");
/*     8 */   adjustError = util.adjustError;
/*    10 */   module.exports = PropertyContainer = (function() {
/*    11 */     var get, set, _this = this;
/*    14 */     function PropertyContainer(db, data) {
/*    15 */       this.db = db;
/*    16 */       this._request = db._request;
/*    17 */       this._data = (data || {
                  });
/*    18 */       this._data.self = ((((data != null) ? data.self : void 0)) || null);
                };
/*    21 */     get = function(props) {
/*    22 */       var getter, name, _results;
/*    23 */       _results = [];
/*    24 */       for (name in props) {
/*    25 */         getter = props[name];
/*    26 */         _results.push(PropertyContainer.prototype.__defineGetter__(name, getter));
                  };
/*    28 */       return _results;
                };
/*    31 */     set = function(props) {
/*    32 */       var name, setter, _results;
/*    33 */       _results = [];
/*    34 */       for (name in props) {
/*    35 */         setter = props[name];
/*    36 */         _results.push(PropertyContainer.prototype.__defineSetter__(name, setter));
                  };
/*    38 */       return _results;
                };
/*    41 */     get({
/*    42 */       self: function() {
/*    43 */         return (this._data.self || null);
                  }
                });
/*    47 */     get({
/*    48 */       exists: function() {
/*    49 */         return (this.self != null);
                  }
                });
/*    53 */     get({
/*    54 */       id: function() {
/*    55 */         var match;
/*    56 */         if (!this.exists) {
/*    57 */           return null;
                    }
/*    58 */          else {
/*    59 */           match = /(?:node|relationship)\/(\d+)$/.exec(this.self);
/*    60 */           return parseInt(match[1]);
                    }
                  ;
                  }
                });
/*    65 */     get({
/*    66 */       data: function() {
/*    67 */         return (this._data.data || null);
                  }
                });
/*    71 */     set({
/*    72 */       data: function(value) {
/*    73 */         return this._data.data = value;
                  }
                });
/*    77 */     PropertyContainer.prototype.equals = function(other) {
/*    78 */       return (this.self === (((other != null) ? other.self : void 0)));
                };
/*    81 */     PropertyContainer.prototype["delete"] = function PropertyContainer_prototype_delete__1(_) {
                  var message, response, __this = this;
                  var __frame = {
                    name: "PropertyContainer_prototype_delete__1",
                    line: 81
                  };
                  return __func(_, this, arguments, PropertyContainer_prototype_delete__1, 0, __frame, function __$PropertyContainer_prototype_delete__1() {
/*    83 */         if (!__this.exists) {
                      return _(null);
                    }
                  ;
                    return (function ___(__then) {
                      (function ___(_) {
                        __tryCatch(_, function __$PropertyContainer_prototype_delete__1() {
/*    87 */               return __this._request.del(__this.self, __cb(_, __frame, 6, 19, function ___(__0, __1) {
/*    87 */                 response = __1;
/*    88 */                 if ((response.statusCode !== status.NO_CONTENT)) {
/*    89 */                   message = "";
/*    90 */                   switch (response.statusCode) {
/*    91 */                   case status.NOT_FOUND:
/*    91 */                     message = "PropertyContainer not found";
/*    92 */                     break;
/*    93 */                   case status.CONFLICT:
/*    94 */                     message = "Node could not be deleted (still has relationships?)";
/*    95 */                   };
/*    97 */                   return _(new Error(message));
                            }
                          ;
/*    99 */                 __this._data.self = null;
                            __then();
                          }, true));
                        });
                      })(function ___(error, __result) {
                        __tryCatch(_, function __$PropertyContainer_prototype_delete__1() {
                          if (error) {
/*   101 */                 return _(adjustError(error));
                          }
                           else {
                            _(null, __result);
                          }
                        ;
                        });
                      });
                    })(function ___() {
                      __tryCatch(_, _);
                    });
                  });
                };
/*   105 */     return PropertyContainer;
/*   107 */   }).call(this);
/*   109 */ }).call(this);
